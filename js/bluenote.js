// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $('document').ready(function() {
    return $('html, body').css({
      'width': '100%',
      'height': '100%'
    });
  });

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  Object.defineProperty(window, 'subviews', {
    get: function() {
      return window._subviews;
    },
    set: function() {}
  });

  window._subviews = [];

  window.addSubView = function(view) {
    $('body').append(view._$elm);
    return window._subviews.push(view);
  };

  this.BNView = (function() {
    function BNView() {
      this._$elm = $('<div />');
      this._$elm.addClass(this.constructor.name);
      this._subviews = [];
    }

    BNView.property('frame', {
      get: function() {
        var frame;
        frame = {
          width: this._$elm.width(),
          height: this._$elm.height()
        };
        return frame;
      },
      set: function(frame) {
        this._$elm.width(frame.width);
        return this._$elm.height(frame.height);
      }
    });

    BNView.prototype.addSubView = function(view) {
      this._$elm.append(view._$elm);
      return this._subviews.push(view);
    };

    BNView.property('subviews', {
      get: function() {
        return this._subviews;
      },
      set: function() {}
    });

    return BNView;

  })();

  this.BNImageView = (function(_super) {
    __extends(BNImageView, _super);

    function BNImageView() {
      BNImageView.__super__.constructor.apply(this, arguments);
      this._$img = $('<img />');
      this._$elm.append(this._$img);
      this._circularize = false;
      this.property('frame', {
        get: function() {
          return BNImageView.__super__.__lookupGetter__('frame').apply(this, arguments);
        },
        set: function(frame) {
          return BNImageView.__super__.__lookupSetter__('frame').apply(this, arguments);
        }
      }, this._$img.css({
        'width': frame.width,
        'height': frame.height
      }));
      this.property('circularize', {
        get: function() {
          return this._circularize;
        },
        set: function(bool) {
          this._circularize = bool;
          if (bool) {
            this._$img.css({
              'border-radius': '100%'
            });
          } else {

          }
          return this._$img.css({
            'border-radius': '0%'
          });
        }
      });
    }

    return BNImageView;

  })(BNView);

  this.BNViewController = (function() {
    function BNViewController() {
      this._view = null;
    }

    BNViewController.property('view', {
      get: function() {
        if (this._view) {
          return this._view;
        }
        this.loadView();
        this.viewDidLoad();
        return this._view;
      },
      set: function(view) {
        view._$elm.css({
          'position': 'absolute',
          'top': '0px',
          'left': '0px',
          'width': '100%',
          'height': '100%'
        });
        return this._view = view;
      }
    });

    BNViewController.prototype.loadView = function() {
      this._view = new BNView();
      return this._view._$elm.css({
        'position': 'absolute',
        'top': '0px',
        'left': '0px',
        'width': '100%',
        'height': '100%'
      });
    };

    BNViewController.prototype.viewDidLoad = function() {};

    return BNViewController;

  })();

}).call(this);
