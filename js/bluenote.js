// Generated by CoffeeScript 1.6.3
/*
 * BlueNote.js
 * 
 * Copyright 2014 tanB
 * Licensed under the Apache License v2.0
 * http://www.apache.org/licenses/LICENSE-2.0
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $('document').ready(function() {
    $('html, body').css({
      'width': '100%',
      'height': '100%',
      'position': 'absolute',
      '-webkit-user-select': 'none',
      '-webkit-user-drag': 'none'
    });
    window._$elm = $('body');
    window._subviews = [];
    window.superview = null;
    window.__resize_event_timer = false;
    window.addSubview = function(view) {
      view.frame = {
        x: 0,
        y: 0,
        width: $(window).outerWidth(),
        height: $(window).outerHeight()
      };
      window.rootViewController.layoutSubviews();
      window._$elm.append(view._$elm);
      window._subviews.push(view);
      return view.superview = window;
    };
    return $(window).bind('resize', function(event) {
      if (window.__resize_event_timer) {
        clearTimeout(window.__resize_event_timer);
      }
      return window.__resize_event_timer = setTimeout(function() {
        if (window.rootViewController) {
          window.rootViewController.view.frame = {
            x: 0,
            y: 0,
            width: $(window).outerWidth(),
            height: $(window).outerHeight()
          };
          return window.rootViewController.didResizeWindow(event);
        }
      }, 50);
    });
  });

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  Object.defineProperty(window, 'subviews', {
    get: function() {
      return window._subviews;
    },
    set: function() {}
  });

  this.BNView = (function() {
    function BNView() {
      this._$elm = $('<div />');
      this._$elm.addClass(this.constructor.name);
      this._subviews = [];
      this._$elm.css({
        position: 'absolute'
      });
      this.superview = null;
      this._clipsToBounds = false;
    }

    BNView.property('frame', {
      get: function() {
        var frame, origin;
        origin = this._$elm.offset();
        frame = {
          x: origin.left,
          y: origin.top,
          width: this._$elm.outerWidth(),
          height: this._$elm.outerHeight()
        };
        return frame;
      },
      set: function(frame) {
        this._$elm.css({
          left: frame.x + "px",
          top: frame.y + "px"
        });
        this._$elm.outerWidth(frame.width);
        return this._$elm.outerHeight(frame.height);
      }
    });

    BNView.prototype.addSubview = function(view) {
      this._$elm.append(view._$elm);
      this._subviews.push(view);
      return view.superview = this;
    };

    BNView.property('subviews', {
      get: function() {
        return this._subviews;
      },
      set: function() {}
    });

    BNView.prototype.layoutSubviews = function() {
      var idx, view, _i, _len, _ref, _results;
      if (this._clipsToBounds) {
        this._$elm.css({
          'overflow': 'hidden'
        });
      } else {
        this._$elm.css({
          'overflow': 'auto'
        });
      }
      _ref = this._subviews;
      _results = [];
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        view = _ref[idx];
        _results.push(view.layoutSubviews());
      }
      return _results;
    };

    BNView.property('clipsToBounds', {
      get: function() {
        return this._clipsToBounds;
      },
      set: function(clip) {
        return this._clipsToBounds = clip;
      }
    });

    return BNView;

  })();

  this.BNImageView = (function(_super) {
    __extends(BNImageView, _super);

    function BNImageView() {
      BNImageView.__super__.constructor.apply(this, arguments);
      this._$img = $('<img />');
      this._$img.bind('load', $.proxy(function() {
        return this.didLoadImage();
      }, this));
      this._$img.css({
        'display': 'inline-block',
        'position': 'absolute',
        '-webkit-user-select': 'none',
        '-webkit-user-drag': 'none'
      });
      this._$elm.append(this._$img);
      this._circularize = false;
    }

    BNImageView.prototype.didLoadImage = function() {
      return this.sizeToFit();
    };

    BNImageView.prototype.sizeToFit = function() {
      var absDH, absDW, cX, cY, imgH, imgW, newH, newW, orgH, orgW, scale;
      orgW = this._$img[0].naturalWidth;
      orgH = this._$img[0].naturalHeight;
      imgW = this.frame.width;
      imgH = this.frame.height;
      absDW = imgW - orgW;
      absDH = imgH - orgH;
      scale = 1;
      if (absDW < absDH) {
        scale = imgH / orgH;
      } else {
        scale = imgW / orgW;
      }
      newW = orgW * scale;
      newH = orgH * scale;
      cX = (imgW - newW) / 2;
      cY = (imgH - newH) / 2;
      return this._$img.css({
        'left': cX,
        'top': cY,
        'width': newW,
        'height': newH
      });
    };

    BNImageView.property('src', {
      get: function() {
        return this._$img.attr('src');
      },
      set: function(src) {
        return this._$img.attr('src', src);
      }
    });

    BNImageView.property('frame', {
      get: function() {
        return BNImageView.__super__.__lookupGetter__('frame').apply(this, arguments);
      },
      set: function(frame) {
        BNImageView.__super__.__lookupSetter__('frame').apply(this, arguments);
        return this.sizeToFit();
      }
    });

    BNImageView.property('circularize', {
      get: function() {
        return this._circularize;
      },
      set: function(bool) {
        this._circularize = bool;
        if (bool) {
          return this._$img.css({
            'border-radius': '100%'
          });
        } else {
          return this._$img.css({
            'border-radius': '0%'
          });
        }
      }
    });

    return BNImageView;

  })(BNView);

  this.BNViewController = (function() {
    function BNViewController() {
      this._view = null;
      this._rightBarButton = null;
      this._leftBarButton = null;
    }

    BNViewController.property('view', {
      get: function() {
        if (this._view) {
          return this._view;
        }
        this.loadView();
        this.viewDidLoad();
        return this._view;
      },
      set: function(view) {
        return this._view = view;
      }
    });

    BNViewController.prototype.loadView = function() {
      return this._view = new BNView();
    };

    BNViewController.prototype.viewDidLoad = function() {
      return this.layoutSubviews();
    };

    BNViewController.prototype.layoutSubviews = function() {
      return this._view.layoutSubviews();
    };

    return BNViewController;

  })();

  this.BNNavigationController = (function(_super) {
    __extends(BNNavigationController, _super);

    function BNNavigationController(firstViewController) {
      BNNavigationController.__super__.constructor.apply(this, arguments);
      this.viewControllers = [firstViewController];
      this._containerView = null;
      this._BAR_HEIGHT = 50;
    }

    BNNavigationController.property('view', {
      get: function() {
        if (this._containerView) {
          return this._containerView;
        }
        this.loadView();
        this.viewDidLoad();
        return this._containerView;
      },
      set: function(frame) {}
    });

    BNNavigationController.prototype.loadView = function() {
      var navContainer, view;
      this._containerView = new BNView();
      view = this.topViewController.view;
      view.frame = {
        x: 0,
        y: 0,
        width: this._containerView.frame.width,
        height: this._containerView.frame.height
      };
      this._containerView.addSubview(view);
      this.navigationBar = new BNView();
      this.navigationBar._$elm.addClass('navbar navbar-static-top');
      this.navigationBar._$elm.css({
        'background-color': 'rgba(221, 221, 221, 0.5)'
      });
      navContainer = $('<div />');
      navContainer.addClass('container');
      this.navigationBar._$elm.append(navContainer);
      this.navigationBar.frame = {
        x: 0,
        y: 0,
        width: this._containerView.frame.width,
        height: this._BAR_HEIGHT
      };
      return this._containerView.addSubview(this.navigationBar);
    };

    BNNavigationController.property('topViewController', {
      get: function() {
        return this.viewControllers[0];
      },
      set: function() {}
    });

    BNNavigationController.prototype.layoutSubviews = function() {
      var lBtnFrame, lBtnX, lBtnY, rBtnFrame, rBtnX, rBtnY, _leftBarButton, _rightBarButton;
      this.topViewController.view.frame = {
        x: 0,
        y: 0,
        width: this._containerView.frame.width,
        height: this._containerView.frame.height
      };
      this.navigationBar.frame = {
        x: 0,
        y: 0,
        width: this._containerView.frame.width,
        height: this._BAR_HEIGHT
      };
      if (this.topViewController._rightBarButton) {
        _rightBarButton = this.topViewController._rightBarButton;
        rBtnX = this._containerView.frame.width - _rightBarButton.frame.width - 8;
        rBtnY = 8;
        rBtnFrame = _rightBarButton.frame;
        rBtnFrame.x = rBtnX;
        rBtnFrame.y = rBtnY;
        _rightBarButton.frame = rBtnFrame;
        this.navigationBar.addSubview(_rightBarButton);
      }
      if (this.topViewController._leftBarButton) {
        _leftBarButton = this.topViewController._leftBarButton;
        lBtnX = 8;
        lBtnY = 8;
        lBtnFrame = _leftBarButton.frame;
        lBtnFrame.x = lBtnX;
        lBtnFrame.y = lBtnY;
        _leftBarButton.frame = lBtnFrame;
        this.navigationBar.addSubview(_leftBarButton);
      }
      return this._containerView.layoutSubviews();
    };

    return BNNavigationController;

  })(BNViewController);

  this.BNControl = (function(_super) {
    __extends(BNControl, _super);

    function BNControl() {
      BNControl.__super__.constructor.apply(this, arguments);
      this.enabled = true;
      this.selected = false;
    }

    return BNControl;

  })(BNView);

  this.BNButton = (function(_super) {
    __extends(BNButton, _super);

    function BNButton() {
      BNButton.__super__.constructor.apply(this, arguments);
      this._$elm.addClass('btn btn-default');
    }

    BNButton.prototype.setTitle = function(title) {
      return this._$elm.text(title);
    };

    return BNButton;

  })(BNControl);

}).call(this);
